{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BTCGambler","text":"<p>Welcome to the public documentation for BTCGambler \u2014 a real-time crash gambling game built on Bitcoin and WebSockets.</p> <p>\ud83d\udccc Note: This project is home-hosted. The live demo is generally available Monday - Friday between 9 AM and 5 PM EST. If the link is temporarily down, please refer to this documentation to explore features, architecture, and usage.</p> <p>\ud83d\udc49 Live Demo </p>"},{"location":"#overview","title":"\ud83d\udccc Overview","text":"<p>BTCGambler is a full-stack crypto gambling app that simulates a high-stakes crash curve with real Bitcoin transaction handling.</p> <p>It supports:</p> <ul> <li>Real-time multiplayer gameplay</li> <li>Secure wallet management using Bitcoin Core</li> <li>OAuth login (Google, GitHub, Facebook, Email)</li> <li>Transaction batching and payout logic</li> <li>Interactive chart, chat, and betting interface</li> </ul>"},{"location":"#demo","title":"\ud83d\udcf7 Demo","text":"Gameplay Demo"},{"location":"#docs","title":"\ud83d\udcc1 Docs","text":"<ul> <li>Features</li> <li>Architecture</li> <li>Setup Instructions</li> </ul>"},{"location":"architecture/","title":"\ud83c\udfd7\ufe0f Architecture","text":"<p>BTCGambler combines blockchain infrastructure with a real-time web stack.</p>"},{"location":"architecture/#components","title":"Components","text":"<ul> <li>Frontend: React + Material UI</li> <li>Backend: Django</li> <li>Realtime Engine: WebSockets</li> <li>Worker: Celery for payout, logging, broadcasts</li> <li>Blockchain: Bitcoin Core integration for real transactions</li> <li>Reverse Proxy: Caddy + Docker Compose</li> </ul>"},{"location":"features/","title":"\ud83d\udd0d Features","text":""},{"location":"features/#authentication","title":"\ud83d\udd10 Authentication","text":"<p>BTCGambler provides a secure and seamless authentication system with support for:</p> OAuth login via Google, Facebook, or Github <p> </p> Email-based registration with background loading screen <p> </p> Email verification for user to be activated  <p> </p> Username based login <p> </p> Two-Factor Authentication (2FA) for enhanced security (optional) <p> </p> Email-based password reset <p> </p>"},{"location":"features/#how-it-works","title":"\ud83c\udfae How It Works","text":"<ul> <li>The game starts at a 1.00x multiplier.</li> <li>The multiplier increases in real time.</li> <li>A randomly determined \"crash point\" is hidden from the user.</li> <li>If the user cashes out before the crash, they win their bet multiplied by the current multiplier.</li> <li>If they wait too long, the game crashes and they lose their bet.</li> </ul> Gameplay Demo"},{"location":"features/#guest-user-functionality","title":"\ud83d\udc64 Guest User Functionality","text":"<p>BTCGambler supports guest login for users who wish to explore without creating an account:</p> <ul> <li>Guests can interact with the crash game temporarily, without registration</li> <li>All guest-related data (e.g. bets, chat messages) is deleted upon logout or session expiration</li> <li>Guests cannot access the Bitcoin faucet, make deposits/withdrawals, or edit profiles</li> <li>Automatic cleanup \u2014 The system ensures full cleanup of guest activity to maintain a clean state</li> </ul>"},{"location":"features/#main-application-view","title":"\ud83c\udfe0 Main Application View","text":"<p>After logging in, users land on the game dashboard \u2014 a real-time interface for placing bets and chatting with others.</p> Sleek dark-blue theme mode enabled by default, with an optional ultra dark mode for visual flexibility <p> </p> Main chart with gameplay and betting form <p> </p> Live chat feature to interact with users while playing the game <p> </p> Switch between FAKE currency and BTC <p> </p>"},{"location":"features/#betting-interface","title":"\ud83c\udfae Betting Interface","text":"<p>The Betting Interface allows users to seamlessly participate in each round with a real-time, responsive experience. It\u2019s designed for clarity, speed, and visual feedback\u2014helping players make quick, informed decisions.</p> <p>Key features include:</p> <ul> <li>Interactive interface to place and pull bets during live rounds  </li> <li>Real-time display of active bets with instant outcome updates  </li> <li>Visual feedback for wins and losses as they happen  </li> <li>Dynamic history bar showcasing recent betting activity  </li> <li>Color-coded multipliers for enhanced visual clarity and user experience  </li> </ul> Betting Interface Demo <p> </p>"},{"location":"features/#bet-tracking","title":"\ud83d\udcca Bet Tracking","text":"<p>The All Bets page provides a comprehensive, timestamped log of all wagers placed across the platform. This feature enables users to monitor historical activity, analyze betting behavior, and ensure transparency.</p> <p>Key features include:</p> <ul> <li>A sortable, tabular view of all recorded bets  </li> <li>Filtering by username for targeted analysis  </li> <li>Sorting options by bet amount, multiplier, winnings, and timestamp  </li> <li>Display of seed hashes for each bet to support provable fairness verification </li> </ul> All Bets Page <p> </p>"},{"location":"features/#provable-fairness","title":"\ud83d\udd10 Provable Fairness","text":"<p>Provable Fairness is a cryptographic guarantee that ensures every crash result on the platform is unbiased and tamper-proof. This system allows users to independently verify that the outcome of each round was generated fairly\u2014without any manipulation from the server or client.</p> <p>Key features of our implementation:</p> <ul> <li>Every round is determined using a combination of Server Seed, Client Seed, and Nonce, hashed using HMAC-SHA256  </li> <li>A Server Seed Hash is published before the round starts, locking in the outcome  </li> <li>After the round ends, the Server Seed is revealed, allowing users to verify the crash point  </li> <li>A built-in Crash Point Verifier lets users input the seeds and nonce to validate results themselves  </li> <li>All rounds are stored and visible in the Provably Fair audit log for full transparency  </li> <li>The fairness logic is open and documented\u2014every player can inspect how crash points are calculated  </li> </ul> <p>Together, these features ensure that trust is not assumed\u2014it\u2019s provable.</p> Provable Fairness <p> </p> Distribution of Multipliers Over 10000 Iterations <p></p>"},{"location":"features/#bitcoin-integration","title":"\ud83e\ude99 Bitcoin Integration","text":"<p>To introduce realism and technical depth, the platform includes native Bitcoin-based betting functionality, simulating a real blockchain environment while preserving a seamless user experience.</p> <p>Key features include:</p> <ul> <li>User-associated Bitcoin wallets for managing in-game funds</li> <li>Ability to send BTC between users via unique wallet addresses</li> <li>Transaction queuing and batching to simulate fee-efficient network behavior</li> <li>Full transaction history with support for sorting, and auditability</li> <li>Designed to mirror real-world blockchain dynamics within a controlled environment</li> </ul> A 0.5 BTC faucet claimable every 24 hours for testing and gameplay <p> </p> Transaction Demo <p> </p>"},{"location":"setup/","title":"\u2699\ufe0f Setup Instructions","text":"<p>NOTE: This documentation is for demonstration purposes only. Source code is private.</p>"},{"location":"setup/#requirements","title":"Requirements","text":"<ul> <li>Docker + Docker Compose</li> <li>A synced Bitcoin Core node (testnet or mainnet)</li> <li>Redis</li> </ul>"},{"location":"setup/#local-deployment-optional","title":"Local Deployment (Optional)","text":"<pre><code>git clone https://github.com/FarzamA/btcgambler\ncd btcgambler\ndocker compose up --build\n</code></pre>"},{"location":"setup/#notes","title":"Notes","text":"<ul> <li>Actual Bitcoin RPC endpoints must be secured and configured in the <code>.env</code> file.</li> <li>For actual code access, contact the author for a private walkthrough.</li> </ul>"}]}